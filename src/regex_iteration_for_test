# alternative to avoid compiling in a loop
image_pattern = re.compile(r"!\[(.*?)\]\((.*?)\)")

def split_nodes_image(old_nodes):
    if type(old_nodes) != list:
        raise TypeError("nodes must be contained in a list")
    if not old_nodes:
        return []
    new_nodes = []

    for node in old_nodes:
        if node.text: # only process if node has text
            images_list = extract_markdown_images(node.text)
            if images_list: # only append if there are matches from function
                remaining_text = node.text
                for alt, url in images_list:
                    match = image_pattern.search(remaining_text)
                    if match:
                        image_index = match.start()
                        if not is_within_code_section(remaining_text, image_index): # only process if image isn't nested within code
                            split_text = image_pattern.split(remaining_text, 1)
                            if split_text[0]: # only append if the first element is text
                                new_nodes.append(TextNode(split_text[0], text_type_text))
                            new_nodes.append(TextNode(alt, text_type_image, url)) # else, append the image node
                            remaining_text = split_text[1] if len(split_text) > 1 else "" # set the remaining text to after the split, resets for new split
                if remaining_text: # only append if there is text after prosessing
                    new_nodes.append(TextNode(remaining_text, text_type_text))
            else:
                new_nodes.append(node)
    return new_nodes
